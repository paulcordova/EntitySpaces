<% 
/*
=========================================================================
    
    EntitySpaces 2010 
    Persistence Layer and Business Objects for Microsoft .NET 
    Copyright 2005 - 2010 EntitySpaces, LLC 
    EntitySpaces(TM) is a legal trademark of EntitySpaces, LLC 
    http://www.entityspaces.net 

    This template is bound by the EntitySpaces License Agreement which 
    is located here:

    http://www.entityspaces.net/portal/License/tabid/97/Default.aspx
    
=========================================================================
*/
%>
<%@ TemplateInfo 
    UniqueID="0ADFF17D-662C-4bbb-A3DA-18988B8174CF" 
	UserInterfaceID="60C6D790-E5BE-4634-B168-A89EC6965F45"
    Title="Custom - Classes Master (C#)"   
    Description="The Custom Master Template" 
    Namespace="EntitySpaces.2024.C#" 
    Author="EntitySpaces, LLC"
    Version="2024.17.0.0"
    RequiresUI="True" %>
<%
string fileName = "";
string outputDirectory = (string)esMeta.Input["OutputPath"];

//===============================================================
// Execute our SubTemplates ....
//===============================================================
//System.Diagnostics.Debugger.Break();

ITable table = null;
IView  view  = null;

ArrayList entities = esMeta.Input["Entities"] as ArrayList;
string entityType = (string)esMeta.Input["EntityType"];
string databaseName = (string)esMeta.Input["Database"];

IDatabase database = esMeta.Databases[databaseName];
	
foreach(string tableOrView in entities)
{
	if(entityType == EntitySpaces.MetadataEngine.dbEntityType.Tables.ToString())
	{
		table = database.Tables[tableOrView];
		
		esMeta.Input["View"] = null;
		esMeta.Input["Table"] = table;
		esMeta.Input["Columns"] = table.Columns;
	}
	else 
	{
		view = database.Views[tableOrView];
		
		esMeta.Input["Table"] = null;
		esMeta.Input["View"] = view;	
		esMeta.Input["Columns"] = view.Columns;
	}
	
	esPluginSource source = new esPluginSource(esMeta, table, view);
	esMeta.Input["Source"] = source;
	
	//----------------------------------------
	// Begin actual template execution
	//----------------------------------------	
	string path = this.Template.Header.FilePath;
	
	fileName = esMeta.esPlugIn.Collection(source) + ".cs";	
	this.SaveToFile(fileName, ExecuteTemplate(esMeta, path + @"\Custom\Custom - Collection (C#).est"), false);
	
	fileName = esMeta.esPlugIn.Entity(source) + ".cs";
	this.SaveToFile(fileName, ExecuteTemplate(esMeta, path + @"\Custom\Custom - Entity (C#).est"), false);
	
	fileName = esMeta.esPlugIn.Query(source) + ".cs";
	this.SaveToFile(fileName, ExecuteTemplate(esMeta, path + @"\Custom\Custom - Query (C#).est"), false);	
}%>
<script runat="template">
private string SaveToFile(string fileName, string text, bool generateSingleFile)
{
	if(!generateSingleFile)
	{
	    string path = (string)esMeta.Input["OutputPath"];
	    
		string fname = path;
		if (!fname.EndsWith("\\")) 
			fname += "\\";
			
		Directory.CreateDirectory(path);		
		
		fname += fileName;
		
		if(!File.Exists(fname))
		{
			using (StreamWriter sw = System.IO.File.CreateText(fname)) 
			{
				sw.Write(text);
			}
		}
		
		return "";
	}
	else
	{
		return text;			
	}
}
</script>